# Identify type of server, DPN or APTrust
- name: Is this an APT or DPN Server
  set_fact: orgtype="{% if 'dpn' in ansible_hostname%}dpn{%else%}apt{%endif%}"
  tags: [always]

# Install required packages
- name: Install required packages
  become: yes
  apt: pkg="{{item}}" state=present update_cache=yes
  with_items:
      - python-pip
      - libmagic-dev
      - git
      - bzr
      - mercurial
      - curl
  environment:
     DEBIAN_FRONTEND: noninteractive

# Set AWS Credentials as ENV
# TODO: Consider using separate creds for staging and prod S3 access.
- name: Set AWS Credentials, GoPath, ExchangeHome
  no_log: true
  lineinfile: >
    dest="/home/{{system_default_user}}/.profile"
    state=present
    regexp="{{item.name}}=.*"
    line="export {{item.name}}={{item.value}}"
  with_items:
    - { name: "AWS_ACCESS_KEY_ID", value: "{{aws_go_user}}"}
    - { name: "AWS_SECRET_ACCESS_KEY", value: "{{aws_go_pwd}}"}
    - { name: "GOPATH", value: "{{go_env.GOPATH}}"}
    - { name: "EXCHANGE_HOME", value: "{{goapp_src_path}}"}
    - { name: "PHAROS_API_USER", value: "{{pharos_api_user}}"}
    - { name: "PHAROS_API_KEY", value: "{{pharos_api_key}}"}
  tags: envvars

# Note: Commmon role creates and mounts external filesystems like EFS/EBS.
#       When deploy is on virtualbox, directories will be created locally.
#       Applying permissions recursively to avoid Supervisor bug that creates
#       logfiles only with root:root rw access.
#       https://github.com/Supervisor/supervisor/issues/114
- name: Create EBS volume directories
  become: yes
  file:
    path: "/mnt/ebs/{{item.0}}/{{item.1}}"
    owner: "{{system_default_user}}"
    group: "{{deploy_group}}"
    mode: 0775
    recurse: yes
    state: directory
  with_nested:
    - ['apt', 'dpn']
    - ['data','logs','restore','replication']
  tags: exchange_ebs

# Create symlink outbound directories for each DPN node user on the system.
- name: Create and symlink outbound directories to EBS staging dir
  become: yes
  file:
    src: "/mnt/ebs/dpn/staging"
    dest: "/home/{{item}}/outbound"
    owner: "{{item}}"
    group: "{{deploy_group}}"
    mode: 0775
    state: link
  with_items:
    - dpn.hathi
    - dpn.chron
    - dpn.sdr
    - dpn.tdr
  tags: outboundsymlink
  when: orgtype == 'dpn'

# TODO: Refactor this as it will clone the repo on every run and overwrite the
#      config files everytime. Consider moving config files in ~/go/bin/config
# Checking if repo has been updated. Does not clone since 'go get' below will
- name: clone exchange repository
  git: repo="git@github.com:APTrust/exchange.git"
      dest="{{ goapp_src_path }}"
      accept_hostkey=yes
      clone=yes
      update=yes
      force=yes
      version=master
  become_user: "{{system_default_user}}"
  become: true
  register: gitclone
  tags: gitclone

# Checkout Exchange repo
- name: Checkout exchange repo
  become_user: "{{system_default_user}}"
  become: true
  shell: "go get -u -f -d github.com/APTrust/exchange/..."
  environment: "{{go_env}}"
  register: checkout
  when: gitclone|changed
  tags: buildgo, gitclone

# go install exchange binaries.
- name: Build and install go binaries
  shell: "go install $(glide novendor)"
  args:
    chdir: "{{goapp_src_path}}"
  environment: "{{go_env}}"
  when: checkout.changed
  register: go_build_result
  failed_when: "'no buildable Go source files' not in go_build_result.stderr"
  # Note: even if status is sucessful this will be a changed task.?
  changed_when: "'no buildable Go source files' not in go_build_result.stderr"
  tags: buildgo

- name: Set apt exchange services fact to configure supervisor
  set_fact:
      exchangeservices: "{{ex_apt_services}}"
  when: orgtype == 'apt'
  tags: lsfiles

- name: Set dpn exchange services fact to configure supervisor
  set_fact:
      exchangeservices: "{{ex_dpn_services}}"
  when: orgtype == 'dpn'
  tags: lsfiles

- name: Set nsq services fact to configure supervisor
  set_fact:
      nsqservices: ['nsqadmin','nsqlookupd','nsqd']
  tags: lsfiles

- name: Update Exchange config file
  template: src=exchange.json.j2
            dest="/{{goapp_cfg_path}}/{{GO_ENV}}.json"
  tags: exchangetemplate

- name: Update NSQ config file
  template: src=nsq.config.j2
            dest="{{goapp_cfg_path}}/nsq/{{GO_ENV}}.config"
  tags: nsq_supervisor

- name: Set Supervisor config for Exchange and NSQ Services
  template: src="{{item.name}}"
            dest="/etc/supervisor/conf.d/{{item.dest}}"
  register: supervisor_config_files
  with_items:
    - { name: 'exchange_supervisor.conf.j2', dest: 'exchange.conf'}
    - { name: 'nsq_supervisor.conf.j2', dest: 'nsq.conf'}
  tags: listfiles

- name: Add DPN cronjobs
  cron: name="{{item.name}}"
        user="{{system_default_user}}"
        minute="{{item.minute | default('*/1')}}"
        hour="{{item.hour | default('*/1')}}"
        job=". $HOME/.profile; {{goapp_bin_path}}/{{item.name}}
             -config={{goapp_cfg_path}}/{{GO_ENV}}.json
             {{item.params | default ()}}
             >> {{goapp_log_path}}/cron_{{item.name}}.log 2>&1"
        state=present
        disabled=no
  with_items:
        - { name: dpn_sync, hour: "*/2", minute: "*/5"}
        - { name: dpn_queue, hour: "*/1", minute: "*/10", params: "-hours=24"}
        - { name: dpn_cleanup, hour: "*/4", minute: "*/20"}
  when: orgtype == 'dpn'
  tags: dpn_cronjobs


- name: Add APTrust cronjobs
  cron: name="{{item.key}}"
        user="{{system_default_user}}"
        minute="{{item.value.minute | default('*')}}"
        hour="{{item.value.hour | default('*')}}"
        job=". $HOME/.profile; {{goapp_bin_path}}/{{item.key}}
             -config={{goapp_cfg_path}}/{{GO_ENV}}.json
             {{item.value.params | default('')}}
             >> {{goapp_log_path}}/cron_{{item.key}}.log 2>&1"
        state=present
        disabled=no
  with_dict: "{{ apt_cronjobs }}"
  when: orgtype == 'apt'
  tags: apt_cronjobs

- set_fact:
      supervisor_apps:
        - 'nsqservices:'
        - 'exchange:'
  when: orgtype == 'apt'

- set_fact:
      supervisor_apps:
        - 'exchange:'
  when: orgtype == 'dpn'

# When state = present, the module will call supervisorctl reread then
# supervisorctl add if the program/group does not exist
- name: Reread/Add supervisor app config files
  supervisorctl: name="{{item}}" state=present
  with_items: "{{supervisor_apps}}"
  register: supervisor_config_update
  when: supervisor_config_files.changed or go_build_result.changed or checkout.changed
  tags: reread_supervisor

# Supervisor controls nsq, not upstart. Disable nsq upstart services.
- name: Ensure nsq upstart services are stopped and disabled
  service: name="{{item}}" state=stopped enabled=no
  ignore_errors: true
  with_items:
#    - nsqd
    - nsqadmin
    - nsqlookupd

# When state = restarted, the module will call supervisorctl update then
# call supervisorctl restart.
- name: Update and restart supervisor processes
  supervisorctl: name="{{item}}" state=restarted
  when: supervisor_config_files.changed or go_build_result.changed or checkout.changed
  with_items: "{{supervisor_apps}}"

# Note: exchange is the program group used in supervisor config.
- name: Ensure Exchange services are running
  supervisorctl: name="{{item}}" state=started
  with_items: "{{supervisor_apps}}"
